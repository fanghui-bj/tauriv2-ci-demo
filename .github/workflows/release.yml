name: "publish"

on:
  push:
    branches:
      - release
  # workflow_dispatch:

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          # - platform: "macos-latest" # for Intel based macs.
          #   args: "--target x86_64-apple-darwin"
          # - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
          #   args: ""
          # - platform: "windows-latest"
          #   args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y  libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

        # 如果你使用的是pnpm，需要先安装pnpm，官方示例使用的是yarn，使用没有这一步。
      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: true

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: install frontend dependencies
        run: pnpm install

      # 注意这个地方的环境变量，除GITHUB_TOKEN外，其他的需要手动进行配置。
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

      - name: 替换 latest.json 中的 URL 并重新签名
        run: |
          # 设定本地服务器的下载地址（你可以根据情况修改）
          CUSTOM_URL="http://192.168.31.11:8000/tauri-ci-demo_${{ steps.tauri.outputs.version }}_aarch64.dmg"

          # 找到 tauri-action 默认生成的 latest.json 路径（通常在 src-tauri 目录下）
          cd src-tauri/target/release/bundle/

          # 替换 URL 字段
          jq --arg url "$CUSTOM_URL" \
             '.platforms["darwin-aarch64"].url = $url' \
             latest.json > latest-patched.json

          # 写入私钥文件（从 secret 获取）
          echo "$TAURI_SIGNING_PRIVATE_KEY" > private.key

          # 安装 tauri CLI（如果未安装）
          cargo install tauri-cli --force

          # 使用 Tauri CLI 重新签名
          tauri signer sign \
            --private-key ./private.key \
            --file latest-patched.json \
            --output latest-patched.json.sig

          # 嵌入签名进 JSON（base64 格式）
          SIGNATURE=$(cat latest-patched.json.sig)
          jq --arg sig "$SIGNATURE" \
             '.platforms["darwin-aarch64"].signature = $sig' \
             latest-patched.json > latest-final.json

          # 替换原文件
          mv latest-final.json latest.json

          # 可选：复制到本地服务的共享目录（如 self-hosted runner 情况）
          cp latest.json /Users/kyle/update-server/

